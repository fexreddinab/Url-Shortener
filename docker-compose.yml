services:
  urlshortenerapi:
    image: urlshortenerapi
    hostname: api                    # konteyner içində görünəcək hostname (api.url.shortener)
    domainname: url-shortener.local 
    build:
      context: .
      dockerfile: UrlShortenerApi/Dockerfile
    depends_on:
      - postgres
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: "http://+:8080"
    volumes:
      # Persist logs or any runtime data the app may write (adjust path if your app writes elsewhere)
      - urlshortener-data:/app/data


  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus                    # konteyner içində görünəcək hostname (api.url.shortener)
    domainname: url-shortener.local
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert.rules.yml:/etc/prometheus/alert.rules.yml
      # Persist Prometheus TSDB data so scrape history survives restarts
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"

  alertmanager:
    image: prom/alertmanager:latest
    hostname: alertmanager                    # konteyner içində görünəcək hostname (api.url.shortener)
    domainname: url-shortener.local
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      # Persist Alertmanager state (alerts, silences)
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    ports:
      - "9093:9093"

  grafana:
    image: grafana/grafana:latest
    hostname: grafana                    # konteyner içində görünəcək hostname (api.url.shortener)
    domainname: url-shortener.local
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 1637
      POSTGRES_DB: urlshortener
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  nginx:
    image: nginx:stable
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - urlshortenerapi

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data


volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  urlshortener-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
